# Problem 1 :  

string NumberToText(int Number) {

    if (Number == 0)
    {
        return "";
    }


    if (Number >= 1 && Number <= 19)
    {
        string arr[] = { "", "One", "Two", "Three", "Four", "Five", "Six",
            "Seven", "Eight", "Nine" ,"Ten", "Eleven", "Twelve", "Thirteen",
            "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};

        return arr[Number] + " ";
    }

    if (Number >= 20 && Number <= 99)
    {
        string arr[] = {"","","Twenty", "Thirty", "Forty", "Fifty", "Sixty",
            "Seventy", "Eighty", "Ninety" };

        return arr[Number / 10] + " " + NumberToText(Number % 10);
    }

    if (Number >= 100 && Number <= 199)
    {
        return "One Hundred " + NumberToText(Number % 100);
    }

    if (Number >= 200 && Number <= 999)
    {
        return NumberToText(Number/100) + "Hundreds " + NumberToText(Number % 100);
    }

    if (Number >= 1000 && Number <= 1999)
    {
        return "One Thousand " + NumberToText(Number % 1000);
    }

    if (Number >= 2000 && Number <= 99999)
    {
        return NumberToText(Number / 1000) + "Thousands " + NumberToText(Number % 1000);
    }

    if (Number >= 1000000 && Number <= 1999999)
    {
        return "One Million " + NumberToText(Number % 1000000);
    }
    
    if (Number >= 2000000 && Number <= 999999999)
    {
        return NumberToText(Number / 1000000) + "Millions " + NumberToText(Number % 1000000);
    }

    if (Number >= 1000000000 && Number <= 1999999999)
    {
        return "One Billion " + NumberToText(Number % 1000000000);
    }else 
    {
        return NumberToText(Number / 1000000000) + "Billions " + NumberToText(Number % 1000000);
    }

}


الإستدعاء : 


	int Number = MyInputLib::ReadPositiveNumber("Please enter a Number ?");

   	 cout << NumberToText(Number);


***********************************************************************************************************

#Problem 2 : 

bool IsLeapYear(int Year)
{
    if (Year % 400 == 0)
    {
        return true;
    }
    else if (Year % 4 == 0 && Year % 100 != 0)
    {
        return true;
    }
    else
    {
        return false;

    }


}

الإستدعاء : 

    int Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");

    if (IsLeapYear(Year))
        cout << "\nYes, Year [" << Year << "] is Leap Year.";
    else
        cout << "\nNo, Year [" << Year << " is Not Leap Year.";


***********************************************************************************************************

#Problem 3 : 

bool IsLeapYear(int Year)
{
    return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}


الإستدعاء : 

    int Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");

    if (IsLeapYear(Year))
        cout << "\nYes, Year [" << Year << "] is Leap Year.";
    else
        cout << "\nNo, Year [" << Year << " is Not Leap Year.";


***********************************************************************************************************

#Problem 4 : 

bool IsLeapYear(int Year)
{
    return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}

/* حلي
int NumberOfDaysInYear(int Year)
{
    return IsLeapYear(Year) ? 366 : 365;
}

int NumberOfHoursInYear(int Year)
{
    return IsLeapYear(Year) ? 366 * 24 : 365 * 24;
}

int NumberOfMinutesInYear(int Year)
{
    return IsLeapYear(Year) ? 366 * 24 * 60 : 365 * 24 * 60;
}

int NumberOfSecondsInYear(int Year)
{
    return IsLeapYear(Year) ? 366 * 24 * 60 * 60 : 365 * 24 * 60 * 60;
}
*/

	int NumberOfDaysInYear(int Year)
	{
		return IsLeapYear(Year) ? 366 : 365;
	}
	int NumberOfHoursInYear(int Year)
	{
		return NumberOfDaysInYear(Year) * 24 ;
	}
	int NumberOfMinutesInYear(int Year)
	{
		return NumberOfHoursInYear(Year) * 60;
	}
	int NumberOfSecondsInYear(int Year)
	{
		return NumberOfMinutesInYear(Year) * 60;
	}

الإستدعاء : 

    int Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");

    cout << "Number Of Days    in Year [" << Year << "] is " << NumberOfDaysInYear(Year) << endl;
    cout << "Number Of Hour    in Year [" << Year << "] is " << NumberOfHoursInYear(Year) << endl;
    cout << "Number Of Minutes in Year [" << Year << "] is " << NumberOfMinutesInYear(Year) << endl;
    cout << "Number Of Seconds in Year [" << Year << "] is " << NumberOfSecondsInYear(Year) << endl;


***********************************************************************************************************


#Problem 5 : 


bool IsLeapYear(int Year)
{
    return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}


int NumberOfDaysInMonth(int Year, int Month)
{
    if (Month < 1 || Month > 12)
        return 0;
    
    if (Month == 2)
    {
        return IsLeapYear(Year) ? 29 : 28;
    }

    short arr31Days[7] = { 1,3,5,7,8,10,12 };

    for (int i = 0; i < 7; i++)
    {
        if (arr31Days[i] == Month)
            return 31;
    }

    // if you reach here then it's 30 days.
    return 30;

}

int NumberOfHoursInMonth(int Year, int Month)
{
    return NumberOfDaysInMonth(Year, Month) * 24;
}

int NumberOfMinutesInMonth(int Year, int Month)
{
    return NumberOfHoursInMonth(Year, Month) * 60;
}

int NumberOfSecoundsInMonth(int Year, int Month)
{
    return NumberOfMinutesInMonth(Year, Month) * 60;
}


الإستدعاء : 

    int Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");
    int Month = MyInputLib::ReadPositiveNumber("Please enter a Month ?");

    cout << "Number Of Days    in Month [" << Month << "] is " << NumberOfDaysInMonth(Year,Month) << endl;
    cout << "Number Of Hour    in Month [" << Month << "] is " << NumberOfHoursInMonth(Year, Month) << endl;
    cout << "Number Of Minutes in Month [" << Month << "] is " << NumberOfMinutesInMonth(Year, Month) << endl;
    cout << "Number Of Seconds in Month [" << Month << "] is " << NumberOfSecoundsInMonth(Year, Month) << endl;



***********************************************************************************************************



#Problem 6 : 

bool IsLeapYear(int Year)
{
    return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}

int NumberOfDaysInMonth(int Year, int Month)
{
    /* حلي 
    return (Month < 1 || Month > 12) ? 0 :((Month == 2) ? (IsLeapYear(Year) ? 29 : 28) 
        : ((Month == 4 || Month == 6 || Month == 9 || Month == 11) ? 30 : 31)); */

    if (Month < 1 || Month > 12)
        return 0;

    int NumberOfDay[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

    return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : NumberOfDay[Month - 1];
   

}

int NumberOfHoursInMonth(int Year, int Month)
{
    return NumberOfDaysInMonth(Year, Month) * 24;
}

int NumberOfMinutesInMonth(int Year, int Month)
{
    return NumberOfHoursInMonth(Year, Month) * 60;
}

int NumberOfSecoundsInMonth(int Year, int Month)
{
    return NumberOfMinutesInMonth(Year, Month) * 60;
}


الإستدعاء : 

    int Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");
    int Month = MyInputLib::ReadPositiveNumber("Please enter a Month ?");

    cout << "Number Of Days    in Month [" << Month << "] is " << NumberOfDaysInMonth(Year,Month) << endl;
    cout << "Number Of Hour    in Month [" << Month << "] is " << NumberOfHoursInMonth(Year, Month) << endl;
    cout << "Number Of Minutes in Month [" << Month << "] is " << NumberOfMinutesInMonth(Year, Month) << endl;
    cout << "Number Of Seconds in Month [" << Month << "] is " << NumberOfSecoundsInMonth(Year, Month) << endl;


***********************************************************************************************************



#Problem 7 : 

/* حلي
enum enDays {Sun = 0, Mon = 1, Tue = 2, Wed = 3, Thu = 4, Fri = 5, Sat = 6};
string ConvertOrderToDaysName(enDays DayOfWeekOrder)
{
    switch (DayOfWeekOrder)
    {
    case Sun:
        return "Sunday";
        break;
    case Mon:
        return "Monday";
        break;
    case Tue:
        return "Tuesday";
        break;
    case Wed:
        return "Wednesday";
        break;
    case Thu:
        return "Thursday";
        break;
    case Fri:
        return "Friday";
        break;
    case Sat:
        return "Saturday";
        break;
    default:
        return "Not Found";
        break;
    }
}
*/

string ConvertOrderToDaysName(short DayOfWeekOrder)
{
    string arrDays[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

    return arrDays[DayOfWeekOrder];
}

short DayOfWeekOrder(short Year, short Month, short Day)
{
    short a = (14 - Month) / 12;
    short Y = Year - a;
    short M = Month + (12 * a) - 2;

    // Gregorian :
    // 0:Sun, 1:Mon, 2:Tue...etc 

    return (Day + Y + (Y / 4) - (Y / 100) + (Y / 400) + ((31 * M) / 12)) % 7;

}


الإستدعاء : 

     short Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");
    short Month = MyInputLib::ReadPositiveNumber("Please enter a Month ?");
    short Day = MyInputLib::ReadPositiveNumber("Please enter a Day ?");

    short DayOrder = DayOfWeekOrder(Year, Month, Day);

    cout << "Date      : " << Day << "/" << Month << "/" << Year << endl;
    cout << "Day Order : " << DayOrder << endl;
    cout << "Day Name  : " << ConvertOrderToDaysName(DayOrder) << endl;

***********************************************************************************************************


#Problem 8 : 

bool IsLeapYear(int Year)
{
	return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}

int NumberOfDaysInMonth(int Year, int Month)
{
	if (Month < 1 || Month > 12)
		return 0;

	if (Month == 2)
	{
		return IsLeapYear(Year) ? 29 : 28;
	}

	short arr31Days[7] = { 1,3,5,7,8,10,12 };

	for (int i = 0; i < 7; i++)
	{
		if (arr31Days[i] == Month)
			return 31;
	}

	// if you reach here then it's 30 days.
	return 30;

}

string MonthShortName(short Month)
{
    //string arrMonth[12] = {"January","Februay","March","April","May","June","July","August","September","October","November","December"};
    string arrMonth[12] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
    return arrMonth[Month-1];
}

short DayOfWeekOrder(short Year, short Month, short Day)
{
	short a = (14 - Month) / 12;
	short Y = Year - a;
	short M = Month + (12 * a) - 2;

	// Gregorian :
	// 0:Sun, 1:Mon, 2:Tue...etc 

	return (Day + Y + (Y / 4) - (Y / 100) + (Y / 400) + ((31 * M) / 12)) % 7;

}

void PrintMonthCalendar(short Month, short Year)
{
	// Index of the day from 0 to 6
	short Curent = DayOfWeekOrder(Year, Month, 1);
	short NumOfDays = NumberOfDaysInMonth(Year, Month);

    printf("\n _______________%s_______________\n\n",MonthShortName(Month).c_str());

	// Print the columns 
    printf("  Sun  Mon  Tue  Wed  Thu  Fri  Sat\n");

	// print appropriate spaces
	short i;
	for (i = 0; i < Curent; i++)
		printf("     ");

	for (short j = 1; j <= NumOfDays; j++)
	{
		printf("%5d", j);

		if (++i == 7)
		{
			i = 0;
			printf("\n");
		}

		
	}
    cout << "\n\n_________________________________\n";

}



الإستدعاء : 

    short Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");
    short Month = MyInputLib::ReadPositiveNumber("Please enter a Month ?");
   
    PrintMonthCalendar(Month,Year);

***********************************************************************************************************

#Problem 9 : 

bool IsLeapYear(int Year)
{
	return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}

int NumberOfDaysInMonth(int Year, int Month)
{
	if (Month < 1 || Month > 12)
		return 0;

	if (Month == 2)
	{
		return IsLeapYear(Year) ? 29 : 28;
	}

	short arr31Days[7] = { 1,3,5,7,8,10,12 };

	for (int i = 0; i < 7; i++)
	{
		if (arr31Days[i] == Month)
			return 31;
	}

	// if you reach here then it's 30 days.
	return 30;

}

string MonthShortName(short Month)
{
    //string arrMonth[12] = {"January","Februay","March","April","May","June","July","August","September","October","November","December"};
    string arrMonth[12] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
    return arrMonth[Month-1];
}

short DayOfWeekOrder(short Year, short Month, short Day)
{
	short a = (14 - Month) / 12;
	short Y = Year - a;
	short M = Month + (12 * a) - 2;

	// Gregorian :
	// 0:Sun, 1:Mon, 2:Tue...etc 

	return (Day + Y + (Y / 4) - (Y / 100) + (Y / 400) + ((31 * M) / 12)) % 7;

}

void PrintMonthCalendar(short Month, short Year)
{
	// Index of the day from 0 to 6
	short Curent = DayOfWeekOrder(Year, Month, 1);
	short NumOfDays = NumberOfDaysInMonth(Year, Month);

    printf("\n_______________%s_______________\n\n",MonthShortName(Month).c_str());

	// Print the columns 
    printf("  Sun  Mon  Tue  Wed  Thu  Fri  Sat\n");

	// print appropriate spaces
	short i;
	for (i = 0; i < Curent; i++)
		printf("     ");

	for (short j = 1; j <= NumOfDays; j++)
	{
		printf("%5d", j);

		if (++i == 7)
		{
			i = 0;
			printf("\n");
		}

		
	}
    cout << "\n\n_________________________________\n";

}

void PrintYearCalendar(short Year)
{
	printf("\n_________________________________\n\n");
	printf("        Calender - %d          \n",Year);
	printf("_________________________________\n");

	for (short i = 1; i <= 12; i++)
	{
		PrintMonthCalendar(i, Year);
	}

}


الإستدعاء : 

   short Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");
   
	PrintYearCalendar(Year);

***********************************************************************************************************


#Problem 10 : 

bool IsLeapYear(int Year)
{
	return (Year % 400 == 0 || (Year % 4 == 0 && Year % 100 != 0)) ? true : false;
}

short NumberOfDaysInMonth(int Year, int Month)
{
	if (Month < 1 || Month > 12)
		return 0;

	if (Month == 2)
	{
		return IsLeapYear(Year) ? 29 : 28;
	}

	short arr31Days[7] = { 1,3,5,7,8,10,12 };

	for (short i = 0; i < 7; i++)
	{
		if (arr31Days[i] == Month)
			return 31;
	}

	// if you reach here then it's 30 days.
	return 30;

}

/* حلي
short NumberOfDaysFromTheBeginingOfTheYear(short Year, short Month, short Day)
{
	
	short Counter = 0;

	for (short i = 1; i <= 12; i++)
	{
		if (i == Month)
		{
			for (short j = 1; j <= NumberOfDaysInMonth(Year,Month); j++)
			{
				if (Day == j) 
				{
					Counter++;
					return Counter;
				}
				else
				{
					Counter++;
				}
			}
		}
		else
		{
			Counter += NumberOfDaysInMonth(Year,i);
		}
	}

	return Counter;
}*/

short NumberOfDaysFromTheBeginingOfTheYear(short Year, short Month, short Day)
{
	short TotalDay = 0;

	for (short i = 1; i <= Month-1; i++)
	{
		TotalDay += NumberOfDaysInMonth(Year, i);
	}

	TotalDay += Day;

	return TotalDay;
}


الإستدعاء : 

    short Day = MyInputLib::ReadPositiveNumber("Please enter a Day ?");
    short Month = MyInputLib::ReadPositiveNumber("Please enter a Month ?");
    short Year = MyInputLib::ReadPositiveNumber("Please enter a Year ?");
   
	
	cout << "Number Of Days from the begining of the year is " 
		<< NumberOfDaysFromTheBeginingOfTheYear(Year,Month,Day);

***********************************************************************************************************