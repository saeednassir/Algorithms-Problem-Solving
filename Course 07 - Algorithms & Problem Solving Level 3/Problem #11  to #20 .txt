# Problem 11 : 


void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 2, arr[i][j]);
		}
		cout << endl;
	}
}


int SumAllMatrix(int arr[3][3], int Rows, int Columns)
{
	int SumMatrix = 0;

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			SumMatrix += arr[i][j];
		}
	}
	return SumMatrix;
}

bool CheckEqual2Matrix(int arr[3][3], int arr2[3][3], short Rows, short Columns)
{
	return (SumAllMatrix(arr, Rows, Columns) == SumAllMatrix(arr2, Rows, Columns));
}

الاستدعاء : 


	srand((unsigned)time(NULL));

	int arr[3][3] ,arr2[3][3];

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	FillMatrixWithRandomNumber(arr2, 3, 3);
	cout << "Matrix 2 : \n";
	PrintMatrix(arr2, 3, 3);

	if (!CheckEqual2Matrix(arr, arr2, 3, 3))
		cout << "\nNo : matrix are Not Equal !\n";
	else
		cout << "\nYes : both matrix are Equal !\n";



***********************************************************************************************************


# Problem 12 : 

void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 2, arr[i][j]);
		}
		cout << endl;
	}
}



bool CheckEqual2MatrixTypical(int arr[3][3], int arr2[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] != arr2[i][j])
				return false;
		}
	}

	return true;

}



الاستدعاء : 


	srand((unsigned)time(NULL));

	int arr[3][3] ,arr2[3][3];

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	FillMatrixWithRandomNumber(arr2, 3, 3);
	cout << "Matrix 2 : \n";
	PrintMatrix(arr2, 3, 3);

	if (!CheckEqual2MatrixTypical(arr, arr2, 3, 3))
		cout << "\nNo : matrix are Not Equal !\n";
	else
		cout << "\nYes : both matrix are Equal !\n";



***********************************************************************************************************



# Problem 13 : 

void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}



bool CheckIdentityMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (i == j && arr[i][j] != 1)
			{
					return false;
			}
			else
			{
				if (i != j && arr[i][j] != 0)
					return false;
			}
				

		}
	}

	return true;

}



الاستدعاء : 

srand((unsigned)time(NULL));

	int arr[3][3];
	

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	if (!CheckIdentityMatrix(arr, 3, 3))
		cout << "\nNo : matrix are Not Equal !\n";
	else
		cout << "\nYes : both matrix are Equal !\n";



	int arr2[3][3] = { {1,0,0} ,{0,1,0},{0,0,1} };
	cout << "\nMatrix 2 : \n";
	PrintMatrix(arr2, 3, 3);

	if (!CheckIdentityMatrix(arr2, 3, 3))
		cout << "\nNo : matrix are Not Identity!\n";
	else
		cout << "\nYes : both matrix are Identity!\n";




***********************************************************************************************************




# Problem 14 : 

void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}



bool CheckScalarMatrix(int arr[3][3], short Rows, short Columns)
{

	int FirstDiagElement = arr[0][0];

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (i == j && arr[i][j] != FirstDiagElement)
			{
					return false;
			}
			else
			{
				if (i != j && arr[i][j] != 0)
					return false;
			}
				

		}
	}

	return true;

}



الاستدعاء : 

srand((unsigned)time(NULL));

	int arr[3][3];
	

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	if (!CheckScalarMatrix(arr2, 3, 3))
		cout << "\nNo : matrix is Not Scalar !\n";
	else
		cout << "\nYes : matrix is Scalar !\n";




	int arr2[3][3] = { {9,0,0} ,{0,9,0},{0,0,9} };
	cout << "\nMatrix 2 : \n";
	PrintMatrix(arr2, 3, 3);

	if (!CheckScalarMatrix(arr2, 3, 3))
		cout << "\nNo : matrix is Not Scalar !\n";
	else
		cout << "\nYes : matrix is Scalar !\n";


***********************************************************************************************************




# Problem 15 : 


void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}

int CountNumberInMatrix(int arr[3][3], short Rows, short Columns, int Number)
{
	short Counter = 0;

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] == Number)
				Counter++;
		}
	}

	return Counter;

}

الاستدعاء : 


	srand((unsigned)time(NULL));

	int arr[3][3];


	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	
	
	int Number = MyInputLib::ReadPositiveNumber("Enter the number to count in matrix ?");

	cout << "Number " << Number << " count in matrix is " << CountNumberInMatrix(arr, 3, 3, Number);



***********************************************************************************************************




# Problem 16 : 


void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}

int CountNumberInMatrix(int arr[3][3], short Rows, short Columns, int Number)
{
	short Counter = 0;

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] == Number)
				Counter++;
		}
	}

	return Counter;

}

bool IsSparseMatrix(int arr[3][3], short Rows, short Columns)
{
	short MatrixSize = Rows * Columns;

	return (CountNumberInMatrix(arr, Rows, Columns, 0) > (MatrixSize / 2));

}


الاستدعاء : 


srand((unsigned)time(NULL));

	int arr[3][3];


	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	if (IsSparseMatrix(arr, 3, 3))
		cout << "Yes , It is Sparse !";
	else
		cout << "No , It is Not Sparse !";

	int arr2[3][3] = { {1,0,1},{1,0,1},{1,0,0} };

	cout << "\nMatrix 2 : \n";
	PrintMatrix(arr2, 3, 3);

	if (IsSparseMatrix(arr2, 3, 3))
		cout << "Yes , It is Sparse !";
	else
		cout << "No , It is Not Sparse !";





***********************************************************************************************************




# Problem 17 : 

void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}

bool IsNumberInMatrix(int arr[3][3], short Rows, short Columns, int Number)
{

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] == Number)
				return true;
		}
	}

	return false;

}




الاستدعاء : 


	srand((unsigned)time(NULL));

	int arr[3][3];


	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	int Number = MyInputLib::ReadPositiveNumber("Please enter number to look for in matrix? ");

	if (IsNumberInMatrix(arr, 3, 3, Number))
		cout << "\nYes it is there.\n";
	else
		cout << "\No it is not there.\n";


***********************************************************************************************************



# Problem 18 : 


void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}

bool IsNumberInMatrix(int arr[3][3], short Rows, short Columns, int Number)
{

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] == Number)
				return true;
		}
	}

	return false;

}

void PrintNumber(int arr[3][3], int arr2[3][3], short Rows, short Columns)
{
	int Number;

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			Number = arr[i][j];

			if (IsNumberInMatrix(arr2, Rows, Columns, Number))
				cout << setw(3) << Number << "  ";

		}
	}

}


الاستدعاء : 

srand((unsigned)time(NULL));

	int arr[3][3];
	int arr2[3][3];
	

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	FillMatrixWithRandomNumber(arr2, 3, 3);
	cout << "Matrix 2 : \n";
	PrintMatrix(arr2, 3, 3);

	cout << "Intersected Numberd are : \n";
	PrintNumber(arr, arr2, 3, 3);


***********************************************************************************************************



# Problem 19 : 

void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}

int MaxNumberInMatrix(int arr[3][3], short Rows, short Columns)
{
	int Max = arr[0][0];

	
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] >= Max)
				Max = arr[i][j];
		}
	}

	return Max;
}

int MinNumberInMatrix(int arr[3][3], short Rows, short Columns)
{
	int Min = arr[0][0];

	
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			if (arr[i][j] <= Min)
				Min = arr[i][j];
		}
	}

	return Min;
}


الاستدعاء : 

	srand((unsigned)time(NULL));

	int arr[3][3];
	
	

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	

	cout << "Max Number In Matrix is : \n" << MaxNumberInMatrix(arr,3,3) << endl;
	cout << "Min Number In Matrix is : \n" << MinNumberInMatrix(arr,3,3) << endl;
	


***********************************************************************************************************



# Problem 20 : 

void FillMatrixWithRandomNumber(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			arr[i][j] = MyOperationsLib::RandomNumber(1, 10);
		}
	}
}

void PrintMatrix(int arr[3][3], short Rows, short Columns)
{
	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns; j++)
		{
			printf("%0*d ", 1, arr[i][j]);
		}
		cout << endl;
	}
}


bool IsPalindromeMatrix(int arr[3][3], short Rows, short Columns) {

	for (int i = 0; i < Rows; i++)
	{
		for (int j = 0; j < Columns/2; j++)
		{
			if (arr[i][j] != arr[i][Columns - 1 - j])
				return false;
		}
	}

	return true;

}



الاستدعاء : 


	srand((unsigned)time(NULL));

	int arr[3][3];
	
	

	FillMatrixWithRandomNumber(arr, 3, 3);
	cout << "Matrix 1 : \n";
	PrintMatrix(arr, 3, 3);

	if (IsPalindromeMatrix(arr, 3, 3))
		cout << " Yes : Matrix is Palindrome";
	else
		cout << "No : Matrix is Not Palindrome";

	// example 2 : 

	int arr2[3][3] = { {1,2,1},{1,1,1},{3,2,3} };

	cout << "Matrix 1 : \n";
	PrintMatrix(arr2, 3, 3);

	if (IsPalindromeMatrix(arr2, 3, 3))
		cout << " Yes : Matrix is Palindrome";
	else
		cout << "No : Matrix is Not Palindrome";



***********************************************************************************************************
