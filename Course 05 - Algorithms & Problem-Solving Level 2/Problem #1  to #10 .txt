// Problem #1  :


void PrintTableHeader()
{
	cout << "\n\n\t\t\t Multipliaction Table From 1 to 10\n\n";
	cout << "\t";

	for (int i = 1; i <= 10; i++)
	{
		cout << i << "\t";
	}

	cout << "\n___________________________________________________________________________________\n";

}


string ColumSperator(int i)
{
	if (i < 10)
		return"   |"; 
	else
		return"  |";

}

void PrintMultiplicationTable()
{
	PrintTableHeader();
	for (int i = 1; i <= 10; i++)
	{
		cout << "  " << i << ColumSperator(i) << "\t";
		
		for (int j = 1; j < 10; j++)
		{
			cout << i * j << "\t";
		}
		cout << endl;
	}
}



الاستدعاء : 


PrintMultiplicationTable();


*********************************************************************************

// Problem #2  :



enum enPrimeNotPrime { Prime = 1, NotPrime = 2 };

float ReadPositiveNumber(string Message)
{
	float Number = 0;
	do
	{
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);

	return Number;
}

enPrimeNotPrime CheckPrime(int Number)
{
	int M = round(Number / 2);

	for (int Counter = 2; Counter <= M; Counter++)
	{
		if (Number % Counter == 0)
			return enPrimeNotPrime::NotPrime;

	}

	return enPrimeNotPrime::Prime;

}


void PrintPrimeNumbersFrom1ToN(int Number)
{
	cout << "\n";
	cout << "Prime Numbers from " << 1 << " To " << Number;
	cout << " are : " << endl;
	for (int i = 1; i <= Number; i++)
	{
		if (CheckPrime(i) == enPrimeNotPrime::Prime)
		{
			cout << i << endl;
		}
	}
}




الاستدعاء : 


PrintPrimeNumbersFrom1ToN(ReadPositiveNumber("Please enter number ?"));


*********************************************************************************


// Problem #3  :


int ReadPositiveNumber(string Message) 
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0); 
	return Number; 
}

bool isPerfectNumber(int Number)
{
	int Sum = 0;

	for (int i = 1; i < Number; i++)
	{
		if (Number % i == 0)
			Sum += i;
	}

	return Sum == Number;
}

void PrintResults(int Number)
{
	if (isPerfectNumber(Number))
		cout << Number << " Is Perfect Number.\n";
	else
		cout << Number << " Is NOT Perfect Number.\n";
}


الاستدعاء : 


PrintResults(ReadPositiveNumber("Please enter a positive number?"));


*********************************************************************************


// Problem #4  :


int ReadPositiveNumber(string Message) 
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0); 
	return Number; 
}

bool isPerfectNumber(int Number)
{
	int Sum = 0;

	for (int i = 1; i < Number; i++)
	{
		if (Number % i == 0)
			Sum += i;
	}

	return Sum == Number;
}

void PrintPerfectNumbersFrom1ToN(int Number)
{
	for (int i = 1; i <= Number; i++)
	{
		if (isPerfectNumber(i))
			cout << i << endl;
	}
}


الاستدعاء : 


PrintPerfectNumbersFrom1ToN(ReadPositiveNumber("Please enter a positive number?"));



*********************************************************************************


// Problem #5  :


int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}

void PrintDigits(int Number)
{
	int Remainder = 0;

	while (Number > 0)
	{
		Remainder = Number % 10;
		Number = Number / 10;
		cout << Remainder << endl;
	}

}


الاستدعاء : 


PrintDigits(ReadPositiveNumber("Please enter a positive number?"));


*********************************************************************************


// Problem #6  :


int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}

int SumOfDigits(int Number)
{
	int Remainder = 0;
	int Sum = 0;

	while (Number > 0)
	{
		Remainder = Number % 10;
		Number = Number / 10;
		Sum += Remainder;
		
	}

	return Sum;
}




الاستدعاء : 


cout << "Sum Of Digits = " << 
	SumOfDigits(ReadPositiveNumber("Please enter a positive number?"));


*********************************************************************************


// Problem #7  :


int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}
int ReverseNumber(int Number)
{
	int Remainder = 0, Number2 = 0;
	while (Number > 0)
	{
		Remainder = Number % 10;
		Number = Number / 10;
		Number2 = Number2 * 10 + Remainder;
	}
	return Number2;
}



الاستدعاء : 



	cout << "\nReverse is:\n"
		<< ReverseNumber(ReadPositiveNumber("Please enter a positive number?"))
		<< "\n";


*********************************************************************************


// Problem #8  :


int ReadPositiveNumber(string Message)
 { 
int Number = 0;
 do    { 
        cout << Message << endl;
         cin >> Number;
     } while (Number <= 0);
 return Number;
 }
 int CountDigitFrequency(short DigitToCheck, int Number)
 {
 int FreqCount = 0, Remainder = 0;
 while (Number > 0)
     {    
     Remainder = Number % 10;
 Number = Number / 10;
 if (DigitToCheck == Remainder)
         {   
          FreqCount++; 
        } 
    } 
return FreqCount;
 } 



الاستدعاء : 


int Number = ReadPositiveNumber("Please enter the main number?");
 short DigitToCheck = ReadPositiveNumber("Please enter one digit to check?");
     cout << "\nDigit " << DigitToCheck << " Frequency is "
        << CountDigitFrequency(DigitToCheck, Number)
 << " Time(s).\n"; 


*********************************************************************************


// Problem #9  :


int ReadPositiveNumber(string Message)
{
    int Number = 0;
    do {
        cout << Message << endl;
        cin >> Number;
    } while (Number <= 0);
    return Number;
}
int CountDigitFrequency(short DigitToCheck, int Number)
{
    int FreqCount = 0, Remainder = 0;
    while (Number > 0)
    {
        Remainder = Number % 10;
        Number = Number / 10;
        

        if (DigitToCheck == Remainder)
        {
            FreqCount++;
        }

       
    }
    return FreqCount;
}

void PrintAllDigitsFrequencey(int Number)
{
    for (int i = 0; i <= 9; i++)
    {
        short DigitToCheck = 0;
        DigitToCheck = CountDigitFrequency(i, Number);

       if (DigitToCheck > 0)
       {
           cout << "\nDigit " << i << " Frequency is "
               << DigitToCheck
               << " Time(s).\n";
       }
    }
}



الاستدعاء : 


int Number = ReadPositiveNumber("Please enter the main number?");
    
    PrintAllDigitsFrequencey(Number);


*********************************************************************************


// Problem #10  :


int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}


int ReverseNumber(int Number)
{
	int Remainder = 0, Number2 = 0;
	while (Number > 0)
	{
		Remainder = Number % 10;
		Number = Number / 10;
		Number2 = Number2 * 10 + Remainder;
	}
	return Number2;
}


void PrintDigits(int Number)
{
	int Remainder = 0;

	while (Number > 0)
	{
		Remainder = Number % 10;
		Number = Number / 10;
		cout << Remainder << endl;
	}

}


الاستدعاء : 


PrintDigits(ReverseNumber(ReadPositiveNumber("Please enter a positive number?")));



*********************************************************************************