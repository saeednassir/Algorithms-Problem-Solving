// Problems #31 :

int ReadPositiveNumber(string Message)
{ 
	int Number = 0;
	do { 
		cout << Message << endl; 
		cin >> Number;
	} while (Number <= 0);
	return Number;
} 
void Swap(int& A, int& B)
{
	int Temp; 

	Temp = A;
	A = B; 
	B = Temp;
}
void FillArrayWith1toN(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		arr[i] = i + 1;
} 
int RandomNumber(int From, int To)
{ 
	//Function to generate a random number
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
} 
void ShuffleArray(int arr[100], int arrLength)
{ 
	for (int i = 0; i < arrLength; i++)
	{   
		Swap(arr[RandomNumber(1, arrLength) - 1], arr[RandomNumber(1, arrLength) - 1]);
	}
}


void PrintArray(int arr[100], int arrLength) 
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";
	cout << "\n";
}




الاستدعاء : 


//Seeds the random number generator in C++, called only once 
	srand((unsigned)time(NULL));
	int arr[100];
	int arrLength = ReadPositiveNumber("\nEnter number of elements : \n");

	FillArrayWith1toN(arr, arrLength);

	cout << "\nArray elements before shuffle:\n";
	PrintArray(arr, arrLength);

	ShuffleArray(arr, arrLength);

	cout << "\nArray elements after shuffle:\n"; 
	PrintArray(arr, arrLength);


**************************************************************************************



// Problems #32 :

int RandomNumber(int From, int To)
{
	//Function to generate a random number
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}

void FillArrayWithRandomNumber(int arr[100], int& arrLength)
{
	cout << "Please enter a number of element ?\n";
	cin >> arrLength;

	for (int i = 0; i < arrLength; i++)
		arr[i] = RandomNumber(1,100);
} 


void CopyArrayInReverseOrder(int arrSource[100], int arrDestination[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
	{
		arrDestination[i] = arrSource[(arrLength - 1) - i];
	}
}


void PrintArray(int arr[100], int arrLength) 
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";
	cout << "\n";
}



الاستدعاء : 



	//Seeds the random number generator in C++, called only once 
	srand((unsigned)time(NULL));
	
	int arr[100], arrLength;

	FillArrayWithRandomNumber(arr, arrLength);

	int arr2[100];
	CopyArrayInReverseOrder(arr, arr2, arrLength);

	cout << "\nArray 1 elements :\n";
	PrintArray(arr, arrLength);

	cout << "\nArray 2 elements after Copy :\n"; 
	PrintArray(arr2, arrLength);


**************************************************************************************




// Problems #33 :

enum enCharType {
	SamallLetter = 1, CapitalLetter = 2,
	SpecialCharacter = 3, Digit = 4
};

int RandomNumber(int From, int To)
{
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}

char GetRandomCharacter(enCharType CharType)
{

	switch (CharType)
	{
	case SamallLetter:
		return char(RandomNumber(97, 122));
		break;
	case CapitalLetter:
		return char(RandomNumber(65, 90));
		break;
	case SpecialCharacter:
		return char(RandomNumber(43, 47));
		break;
	case Digit:
		return char(RandomNumber(48, 57));
		break;

	}

}

int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}

string GenerateWord(enCharType CharType, short Length)
{
	string Word;

	for (int i = 0; i <= Length; i++)
	{
		Word = Word + GetRandomCharacter(CharType);
	}

	return Word;

}


string  GenerateKey()
{
	string Key = "";

	Key = GenerateWord(enCharType::CapitalLetter, 4) + "-";
	Key = Key + GenerateWord(enCharType::CapitalLetter, 4) + "-";
	Key = Key + GenerateWord(enCharType::CapitalLetter, 4) + "-";
	Key = Key + GenerateWord(enCharType::CapitalLetter, 4);

	return Key;
}


void FillArrayWithKeys(string arr[100], int arrLength)
{

	for (int i = 0; i < arrLength; i++)
	{
		arr[i] = GenerateKey();
	}

}

void PrintStringArray(string arr[100], int arrLength)
{
	cout << "\nArray elements :\n";

	for (int i = 0; i < arrLength; i++)
	{
		cout << "Array [" << i << "] : " << arr[i] << endl;
	}

	cout << "\n";
}

void GenerateKeys(short NumberOfKeys)
{
	for (int i = 1; i <= NumberOfKeys; i++)
	{
		cout << "Key [" << i << "] : ";
		cout << GenerateKey() << endl;
	}
}



الاستدعاء : 


//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));
	
	int arrLength = 0;
	string arr[100];

	arrLength = ReadPositiveNumber("How many keys do you want to generate?\n");

	FillArrayWithKeys(arr, arrLength);

	PrintStringArray(arr, arrLength);


**************************************************************************************



// Problems #34 :

int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}

int RandomNumber(int From, int To)
{
	//Function to generate a random number
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}

void FillArrayWithRandomNumber(int arr[100], int arrLength)
{
	
	for (int i = 0; i < arrLength; i++)
		arr[i] = RandomNumber(1, 100);
}


void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";
	cout << "\n";
}

short FindNumberPositionInArray(int Number, int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
	{
		if (Number == arr[i])
			return i;
	}
	return -1;
}



الاستدعاء : 

//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));

int arr[100], arrLength = 0;

	arrLength = ReadPositiveNumber("\nEnter number of elements : \n");

	FillArrayWithRandomNumber(arr, arrLength);

	cout << "\nArray elements : \n";
	PrintArray(arr, arrLength);

	int Number = ReadPositiveNumber("Please enter Number to Search For ?");
	cout << "\nNumber you are looking for is : ";
	cout << Number << endl;

	short NumberPosition = FindNumberPositionInArray(Number, arr, arrLength);


	if (NumberPosition == -1)
	{

		cout << "\nThe number is not found :-(" << endl;

	}
	else
	{
		
		cout << "\nThe number found at position : ";
		cout << NumberPosition << endl;

		cout << "The number found its order : ";
		cout << NumberPosition + 1 << endl;
		
	}



**************************************************************************************



// Problems #35 :


int ReadPositiveNumber(string Message)
{
	int Number = 0;
	do {
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}

int RandomNumber(int From, int To)
{
	//Function to generate a random number
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}

void FillArrayWithRandomNumber(int arr[100], int arrLength)
{
	
	for (int i = 0; i < arrLength; i++)
		arr[i] = RandomNumber(1, 100);
}


void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";
	cout << "\n";
}

short FindNumberPositionInArray(int Number, int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
	{
		if (Number == arr[i])
			return i;
	}
	return -1;
}

bool IsNumberInArray(int Number, int arr[100], int arrLength)
{ 
	return FindNumberPositionInArray(Number, arr, arrLength) != -1;
}


الاستدعاء : 



	//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));

	int arr[100], arrLength = 0;

	arrLength = ReadPositiveNumber("\nEnter number of elements : \n");

	FillArrayWithRandomNumber(arr, arrLength);

	cout << "\nArray elements : \n";
	PrintArray(arr, arrLength);

	int Number = ReadPositiveNumber("Please enter Number to Search For ?");
	cout << "\nNumber you are looking for is : ";
	cout << Number << endl;

	

	if (IsNumberInArray(Number,arr,arrLength))
	{

		cout << "\nYes, The number is found :-)" << endl;

	}
	else
	{
		
		cout << "\nNo, The number is not found :-(" << endl;
		
	}


**************************************************************************************




// Problems #36 :


int ReadNumber()
{
	int Number;

	cout << "Please enter a number ? ";
	cin >> Number;

	return Number;
}

void AddArrayElement(int Number, int arr[100], int& arrLength)
{
	arrLength++;
	arr[arrLength - 1] = Number;
}

void InputUserNumbersInArray(int arr[100], int& arrLength) 
{

	bool AddMore = true; 

	do { 
		AddArrayElement(ReadNumber(), arr, arrLength);

		cout << "\nDo you want to add more numbers? [0]:No,[1]:yes? ";
		cin >> AddMore;

	} while (AddMore);

}


void PrintArray(int arr[100], int arrLength)
{

	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " "; 

	cout << "\n";

}


الاستدعاء : 


int arr[100], arrLength = 0; 

	InputUserNumbersInArray(arr, arrLength);

	cout << "\nArray Length: " << arrLength << endl;  
	cout << "Array elements: "; 

	PrintArray(arr, arrLength);


**************************************************************************************






// Problems #37 :


int RandomNumber(int From, int To) {
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}


void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{
	cout << "\nEnter number of elements:\n"; 
	cin >> arrLength;

	for (int i = 0; i < arrLength; i++)
		arr[i] = RandomNumber(1, 100);

} 
void PrintArray(int arr[100], int arrLength)
{ 
	for (int i = 0; i < arrLength; i++) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 

void AddArrayElement(int Number, int arr[100], int& arrLength) 
{
	//its a new element so we need to add the length by 1

	arrLength++;
	arr[arrLength - 1] = Number;
}

void CopyArrayUsingAddArrayElement(int arrSource[100], int arrDestination[100], int arrLength, int& arrDestinationLength)
{ 
	for (int i = 0; i < arrLength; i++)  
		AddArrayElement(arrSource[i], arrDestination, arrDestinationLength);

}



الاستدعاء : 


//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));

	int arr[100], arrLength = 0, arr2Length = 0; 

	FillArrayWithRandomNumbers(arr, arrLength); int arr2[100]; 

	CopyArrayUsingAddArrayElement(arr, arr2, arrLength, arr2Length); 

	cout << "\nArray 1 elements:\n";    
	PrintArray(arr, arrLength); 

	cout << "\nArray 2 elements after copy:\n"; 
	PrintArray(arr2, arr2Length);


**************************************************************************************




// Problems #38 :

int RandomNumber(int From, int To) {
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}


void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{
	cout << "\nEnter number of elements:\n"; 
	cin >> arrLength;

	for (int i = 0; i < arrLength; i++)
		arr[i] = RandomNumber(1, 100);

} 
void PrintArray(int arr[100], int arrLength)
{ 
	for (int i = 0; i < arrLength; i++) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 

void AddArrayElement(int Number, int arr[100], int& arrLength) 
{
	//its a new element so we need to add the length by 1

	arrLength++;
	arr[arrLength - 1] = Number;
}


void CopyOddNumbers(int arrSource[100], int arrDestination[100], int arrLength, int& arrDestinationLength)
{ 
	for (int i = 0; i < arrLength; i++)
	{
		if (arrSource[i] % 2 != 0)
			AddArrayElement(arrSource[i], arrDestination, arrDestinationLength);

	}
		
}



الاستدعاء : 

//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));

	int arr[100], arrLength = 0, arr2Length = 0; 

	FillArrayWithRandomNumbers(arr, arrLength); int arr2[100]; 

	CopyOddNumbers(arr, arr2, arrLength, arr2Length);

	cout << "\nArray 1 elements:\n";    
	PrintArray(arr, arrLength); 

	cout << "\nArray 2 elements after copy:\n"; 
	PrintArray(arr2, arr2Length);




**************************************************************************************





// Problems #39 :



enum enPrimNotPrime { Prime = 1, NotPrime = 2 };

enPrimNotPrime CheckPrime(int Number)
{
	int M = round(Number / 2);
	for (int Counter = 2; Counter <= M; Counter++)
	{
		if (Number % Counter == 0)
			return enPrimNotPrime::NotPrime;
	}
	return enPrimNotPrime::Prime;
}

int RandomNumber(int From, int To) {
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}


void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{
	cout << "\nEnter number of elements:\n"; 
	cin >> arrLength;

	for (int i = 0; i < arrLength; i++)
		arr[i] = RandomNumber(1, 100);

} 
void PrintArray(int arr[100], int arrLength)
{ 
	for (int i = 0; i < arrLength; i++) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 

void AddArrayElement(int Number, int arr[100], int& arrLength) 
{
	//its a new element so we need to add the length by 1

	arrLength++;
	arr[arrLength - 1] = Number;
}


void CopyPrimeNumbers(int arrSource[100], int arrDestination[100], int arrLength, int& arrDestinationLength)
{ 
	for (int i = 0; i < arrLength; i++)
	{
		if (CheckPrime(arrSource[i]) == enPrimNotPrime::Prime)
			AddArrayElement(arrSource[i], arrDestination, arrDestinationLength);

	}
		
}

الاستدعاء : 


//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));

	int arr[100], arrLength = 0, arr2Length = 0; 

	FillArrayWithRandomNumbers(arr, arrLength); int arr2[100]; 

	CopyPrimeNumbers(arr, arr2, arrLength, arr2Length);

	cout << "\nArray 1 elements:\n";    
	PrintArray(arr, arrLength); 

	cout << "\nArray 2 elements after copy:\n"; 
	PrintArray(arr2, arr2Length);


**************************************************************************************



// Problems #40 :


void FillArray(int arr[100], int& arrLength)
{ 
	arrLength = 10;

	arr[0] = 10;
	arr[1] = 10;
	arr[2] = 10;
	arr[3] = 50;
	arr[4] = 50;
	arr[5] = 70;
	arr[6] = 70;
	arr[7] = 70;
	arr[8] = 70;
	arr[9] = 90;
}

void PrintArray(int arr[100], int arrLength) 
{
	for (int i = 0; i < arrLength; i++) 
		cout << arr[i] << " "; 
	cout << "\n";
}

short FindNumberPositionInArray(int Number, int arr[100], int arrLength) 
{
	for (int i = 0; i < arrLength; i++) 
	{ 
		if (arr[i] == Number) 
			return i;
		//return the index 
	}

	
	//if you reached here, this means the number is not foundreturn -1;
	return -1;
}

bool IsNumberInArray(int Number, int arr[100], int arrLength)
{ 
	return FindNumberPositionInArray(Number, arr, arrLength) != -1;
}


void AddArrayElement(int Number, int arr[100], int& arrLength)
{ 
	//its a new element so we need to add the length by 1

	arrLength++; 
	arr[arrLength - 1] = Number;

} 

void CopyDistinctNumbersToArray(int arrSource[100], int arrDestination[100], int SourceLength, int& DestinationLength)

{ 
	for (int i = 0; i < SourceLength; i++) 
	{ 
		if (!IsNumberInArray(arrSource[i], arrDestination, DestinationLength))
		{         
			AddArrayElement(arrSource[i], arrDestination, DestinationLength);   
		}   
	};

}


الاستدعاء : 


int arrSource[100], SourceLength = 0, arrDestination[100], DestinationLength = 0;

	FillArray(arrSource, SourceLength); 

	cout << "\nArray 1 elements:\n";  
	PrintArray(arrSource, SourceLength);

	CopyDistinctNumbersToArray(arrSource, arrDestination, SourceLength, DestinationLength);  

	cout << "\nArray 2 distinct elements:\n";  
	PrintArray(arrDestination, DestinationLength);


**************************************************************************************