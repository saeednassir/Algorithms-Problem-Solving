#include <iostream>
#include <cmath>
#include <string>
#include<cstdlib> 

using namespace std;


enum enQuestionsLevel{ EasyLevel = 1, MedLevel = 2, HardLevel = 3, Mix = 4 };

enum enOperationType{ Add = 1, Sub = 2, Mult = 3, Div = 4, MixOp = 5 };

struct stQuestion
{
	int Number1 = 0;
	int Number2 = 0;
	enOperationType OperationType;
	enQuestionsLevel QuestionLevel;
	int CorrectAnswer = 0;
	int PlayerAnswer = 0;
	bool AnswerResult = false;

};

struct stQuizz
{
	stQuestion QuestionList[100]; 
	short NumberOfQuestions;
	enQuestionsLevel QuestionsLevel;
	enOperationType OpType;
	short NumberOfWrongAnswers = 0;
	short NumberOfRightAnswers = 0; 
	bool isPass = false;
}; 

string GetQuestionLevelText(enQuestionsLevel QuestionLevel)
{
	string arrQuestionLevelText[4] = { "Easy","Med","Hard","Mix" };
	return arrQuestionLevelText[QuestionLevel - 1];
}

int RandomNumber(int From, int To)
{ 
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum; 

} 

short ReadHowManyQuestions()
{
	short NumberOfQuestions;

	do
	{

		cout << "How Many Questions do you want to answer ? ";
		cin >> NumberOfQuestions;

	} while (NumberOfQuestions < 1 || NumberOfQuestions > 10);

	return NumberOfQuestions;

}

enQuestionsLevel ReadQuestionsLevel()
{
	short QuestionsLevel = 0;

	do
	{

		cout << "Enter Questions Level [1] Easy, [2] Med, [3] Hard, [4] Mix ?";
		cin >> QuestionsLevel;

	} while (QuestionsLevel < 1 || QuestionsLevel > 4);

	return (enQuestionsLevel)QuestionsLevel;

}

enOperationType ReadOpType()
{
	short OpType;

	do
	{
		cout << "Enter Operayion Type [1] Add, [2] Sub, [3] Mul, [4] Div, [5] Mix ? ";
		cin >> OpType;

	} while (OpType < 1 || OpType > 5);

	return (enOperationType)OpType;
}

enOperationType GetRandomOperationType()
{
	int Op = RandomNumber(1, 4);
	return (enOperationType)Op;
}

enQuestionsLevel GetRandomQuestionsLevel()
{
	int QL = RandomNumber(1, 3);
	return (enQuestionsLevel)QL;
}

int SimpleCalculator(int Number1, int Number2, enOperationType OpType)
{
	switch (OpType)
	{
	case Add:
		return Number1 + Number2;
	case Sub:
		return Number1 - Number2;
	case Mult:
		return Number1 * Number2;
	case Div:
		return Number1 / Number2;
	default:
		return Number1 + Number2;
	}
}

stQuestion GenerateQuestion(enQuestionsLevel QuestionsLevel, enOperationType OpType)

{
	stQuestion Question;

	if (QuestionsLevel == enQuestionsLevel::Mix)
	{
		QuestionsLevel = GetRandomQuestionsLevel();
	}

	if (OpType == enOperationType::MixOp)
	{
		OpType = GetRandomOperationType();
	}

	Question.OperationType = OpType;

	switch (QuestionsLevel)
	{
	case EasyLevel:
		Question.Number1 = RandomNumber(1, 10);
		Question.Number2 = RandomNumber(1, 10);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionLevel = QuestionsLevel;

		return Question;

	case MedLevel:
		Question.Number1 = RandomNumber(10, 50);
		Question.Number2 = RandomNumber(10, 50);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionLevel = QuestionsLevel;

		return Question;

	case HardLevel:
		Question.Number1 = RandomNumber(50, 100);
		Question.Number2 = RandomNumber(50, 100);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionLevel = QuestionsLevel;

		return Question;

	}

	return Question;

}

void GenerateQuizzQuestions(stQuizz& Quizz)
{
	for (short Question = 0; Question < Quizz.NumberOfQuestions; Question++)
	{
		Quizz.QuestionList[Question] = GenerateQuestion(Quizz.QuestionsLevel, Quizz.OpType);
	}
}


string GetOpTypeSymbol(enOperationType OpType) 
{
	switch (OpType) 
	{ 
		case enOperationType::Add:
			return"+";
		case enOperationType::Sub:
			return"-";
		case enOperationType::Mult:
			return"x";
		case enOperationType::Div:
			return"/";
		default:
			return"Mix";
	}

}

void PrintTheQuestion(stQuizz& Quizz,short QuestionNumber)
{
	cout << "\n";
	cout << "Question [" << QuestionNumber + 1 << "/" << Quizz.NumberOfQuestions << "] \n\n";
	cout << Quizz.QuestionList[QuestionNumber].Number1 << endl;
	cout << Quizz.QuestionList[QuestionNumber].Number2 << " ";
	cout << GetOpTypeSymbol(Quizz.QuestionList[QuestionNumber].OperationType);
	cout << "\n___________" << endl;
}

int ReadQuestionAnswer()
{
	int Answer = 0; 

	cin >> Answer; 

	return Answer;
}

void SetScreenColor(bool Right)
{

	if (Right) 
		system("color 2F"); //turn screen to Green
	else
	{     
		system("color 4F"); //turn screen to Red
		cout << "\a";
	}  
}

void CorrectTheQuestionAnswer(stQuizz& Quizz, short QuestionNumber)
{
	if (Quizz.QuestionList[QuestionNumber].PlayerAnswer != Quizz.QuestionList[QuestionNumber].CorrectAnswer) 
	{
		Quizz.QuestionList[QuestionNumber].AnswerResult = false;
		Quizz.NumberOfWrongAnswers++;
		cout << "Worng Answer :-( \n";
		cout << "The right answer is: ";
		cout << Quizz.QuestionList[QuestionNumber].CorrectAnswer;
		cout << "\n";
	}else 
	{
		Quizz.QuestionList[QuestionNumber].AnswerResult = true;
		Quizz.NumberOfRightAnswers++;
		cout << "Right Answer :-) \n";
	}

	cout << endl; 

	SetScreenColor(Quizz.QuestionList[QuestionNumber].AnswerResult);

}

void AskAndCorrectQuestionListAnswer(stQuizz& Quizz)
{
	for (short QuestionNumber = 0; QuestionNumber < Quizz.NumberOfQuestions; QuestionNumber++)
	{
		PrintTheQuestion(Quizz, QuestionNumber);
		Quizz.QuestionList[QuestionNumber].PlayerAnswer = ReadQuestionAnswer();
		CorrectTheQuestionAnswer(Quizz, QuestionNumber);
	}

	Quizz.isPass = (Quizz.NumberOfRightAnswers >= Quizz.NumberOfWrongAnswers);

}

string GetFinalResultsText(bool Pass) 
{
	if (Pass)
		return"PASS :-)";
	else
		return"Fail :-(";
}


void PrintQuizzResults(stQuizz Quizz)
{

	cout << "\n";
	cout << "______________________________\n\n";
	cout << " Final Resutls is " << GetFinalResultsText(Quizz.isPass); 
	cout << "\n______________________________\n\n";
	cout << "Number of Questions: " << Quizz.NumberOfQuestions << endl; 
	cout << "Questions Level    : " << GetQuestionLevelText(Quizz.QuestionsLevel) << endl;  
	cout << "OpType             : " << GetOpTypeSymbol(Quizz.OpType) << endl; 
	cout << "Number of Right Answers: " << Quizz.NumberOfRightAnswers << endl; 
	cout << "Number of Wrong Answers: " << Quizz.NumberOfWrongAnswers << endl;
	cout << "______________________________\n";

	//SetScreenColor(Quizz.isPass);
}


void PlayMathGame()
{
	stQuizz Quizz;

	Quizz.NumberOfQuestions = ReadHowManyQuestions();
	Quizz.QuestionsLevel = ReadQuestionsLevel();
	Quizz.OpType = ReadOpType();

	GenerateQuizzQuestions(Quizz);

	AskAndCorrectQuestionListAnswer(Quizz);
	PrintQuizzResults(Quizz);


}

void ResetScreen()
{
	system("cls");
	system("color 0F");
}

void StartGame()
{
	char PlayAgain = 'Y';

	do
	{
		ResetScreen();
		PlayMathGame();

		cout << endl << "Do you want to play again ? Y/N? ";
		cin >> PlayAgain;

	} while (PlayAgain == 'Y' || PlayAgain == 'y');

}


int main()
{

	//Seeds the random number generator in C++, called only once    
	srand((unsigned)time(NULL));

	StartGame();
	
	return 0;
}



**************************************************************************************
// حلي :
**************************************************************************************


enum enQuestionsLevel { EasyLevel = 1, MedLevel = 2, HardLevel = 3, Mix = 4 };

enum enOperationType { Add = 1, Sub = 2, Mult = 3, Div = 4, MixOp = 5 };

struct stQuestion
{
	int Number1 = 0;
	int Number2 = 0;
	enOperationType OperationType;
	enQuestionsLevel QuestionLevel;
	int CorrectAnswer = 0;
	int PlayerAnswer = 0;
	bool AnswerResult = false;

};

struct stQuizz
{
	stQuestion QuestionList[100];
	short NumberOfQuestions;
	enQuestionsLevel QuestionsLevel;
	enOperationType OpType;
	short NumberOfWrongAnswers = 0;
	short NumberOfRightAnswers = 0;
	bool isPass = false;
};

short ReadHowManyQuestions()
{
	short QuestionsNumber;
	do
	{

		cout << "How Many Questions do You want to answer ? ";
		cin >> QuestionsNumber;

	} while (QuestionsNumber < 1 || QuestionsNumber > 10);

	return QuestionsNumber;

}

enQuestionsLevel ReadQuestionLevel()
{
	short Number;

	do
	{
		cout << "Enter Qestions Level [1] Eazy, [2] Med, [3] Hard, [4] Mix ? ";
		cin >> Number;

	} while (Number < 1 || Number > 4);

	return (enQuestionsLevel)Number;
}

enOperationType ReadOperationType()
{
	short Number;

	do
	{
		cout << "Enter Qestions Level [1] Add, [2] Sub, [3] Mult, [4] Div, [5] Mix ? ";
		cin >> Number;

	} while (Number < 1 || Number > 5);

	return (enOperationType)Number;
}

int RandomNumber(int From, int To)
{
	//Function to generate a random number 
	int randNum = rand() % (To - From + 1) + From; 
	return randNum;
} 


enOperationType GetRandomOperationType()
{
	return (enOperationType)RandomNumber(1, 4);
}

enQuestionsLevel GetRandomQuestionsLevel()
{
	return (enQuestionsLevel)RandomNumber(1, 3);
}

int SimpleCalculator(int Number1,int Number2,enOperationType OpType)
{
	switch (OpType)
	{
	case Add:
		return Number1 + Number2;
	case Sub:
		return Number1 - Number2;
	case Mult:
		return Number1 * Number2;
	case Div:
		return Number1 / Number2;
	default:
		return Number1 + Number2;
	}
}

stQuestion GenerateQuestion(enQuestionsLevel QuestionsLevel, enOperationType OpType)
{
	stQuestion Question;

	if (OpType == enOperationType::MixOp)
	{
		OpType = GetRandomOperationType();
	}

	if (QuestionsLevel == enQuestionsLevel::Mix)
	{
		QuestionsLevel = GetRandomQuestionsLevel();
	}

	Question.OperationType = OpType;

	switch (QuestionsLevel)
	{
	case EasyLevel:
		Question.Number1 = RandomNumber(1, 10);
		Question.Number2 = RandomNumber(1, 10);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1,Question.Number2,Question.OperationType);
		Question.QuestionLevel = QuestionsLevel;
		return Question;

	case MedLevel: 
		Question.Number1 = RandomNumber(10, 50);
		Question.Number2 = RandomNumber(10, 50);
		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);  
		Question.QuestionLevel = QuestionsLevel;
		return Question;

	case HardLevel:
		Question.Number1 = RandomNumber(50, 100);
		Question.Number2 = RandomNumber(50, 100);
		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionLevel = QuestionsLevel;
		return Question;
	}

	return Question;

}


void GenerateQuizzQuestion(stQuizz& Quizz)
{
	for (short QuestionNumber = 0; QuestionNumber < Quizz.NumberOfQuestions; QuestionNumber++)
	{
		Quizz.QuestionList[QuestionNumber] = GenerateQuestion(Quizz.QuestionsLevel,Quizz.OpType);
	}
}

string GetOpTypeSymbol(enOperationType OpType)
{
	switch (OpType)
	{
	case Add:
		return "+";
	case Sub:
		return "-";
	case Mult:
		return "*";
	case Div:
		return "/";
	default:
		return "Mix";
	}
}

void PrintTheQuestion(stQuizz& Quizz, short QuestionNumber) 
{ 
	cout << "\n"; 
	cout << "Question [" << QuestionNumber + 1 << "/" << Quizz.NumberOfQuestions << "] \n\n";
	cout << Quizz.QuestionList[QuestionNumber].Number1 << endl;  
	cout << Quizz.QuestionList[QuestionNumber].Number2 << " ";  
	cout << GetOpTypeSymbol(Quizz.QuestionList[QuestionNumber].OperationType);
	cout << "\n_________" << endl;
}

int ReadPlayerAnswer()
{
	int Number;
	cin >> Number;
	return Number;
}

void SetScreenColor(bool Right) 
{

	if (Right)
	{
		system("color 2F"); //turn screen to Green
	}
	else
	{
		system("color 4F");//turn screen to Red   
		cout << "\a";
	}
}


void CorrectTheQuestionAnswer(stQuizz& Quizz, short QuestionNumber)
{
	if (Quizz.QuestionList[QuestionNumber].PlayerAnswer != Quizz.QuestionList[QuestionNumber].CorrectAnswer)
	{
		Quizz.QuestionList[QuestionNumber].AnswerResult = false;
		Quizz.NumberOfWrongAnswers++;

		cout << "Worng Answer :-( \n";
		cout << "The right answer is: ";
		cout << Quizz.QuestionList[QuestionNumber].CorrectAnswer;
		cout << "\n";

	}
	else 
	{
		Quizz.QuestionList[QuestionNumber].AnswerResult = true; 
		Quizz.NumberOfRightAnswers++;    
		cout << "Right Answer :-) \n";
	}  

	cout << endl;   

	SetScreenColor(Quizz.QuestionList[QuestionNumber].AnswerResult);
}



void AskAndCorrectQuestionListAnswers(stQuizz& Quizz)
{

	for (short QuestionNumber = 0; QuestionNumber < Quizz.NumberOfQuestions; QuestionNumber++)
	{
		PrintTheQuestion(Quizz, QuestionNumber);
		Quizz.QuestionList[QuestionNumber].PlayerAnswer = ReadPlayerAnswer();
		CorrectTheQuestionAnswer(Quizz, QuestionNumber);
	}

	Quizz.isPass = (Quizz.NumberOfRightAnswers >= Quizz.NumberOfWrongAnswers);

}

string GetFinalResultsText(bool Pass) 
{
	if (Pass) 
		return"PASS :-)";
	else
		return"Fail :-(";
}

string GetQuestionLevelText(enQuestionsLevel Questionlevel)
{
	string QL[4] = {"Easy","Med","Hard","Mix"};
	return QL[Questionlevel - 1];
}

void PrintQuizzResults(stQuizz Quizz) 
{
	cout << "\n";
	cout << "______________________________\n\n";
	cout << " Final Resutls is " << GetFinalResultsText(Quizz.isPass); 
	cout << "\n______________________________\n\n";
	cout << "Number of Questions: " << Quizz.NumberOfQuestions << endl; 
	cout << "Questions Level    : " << GetQuestionLevelText(Quizz.QuestionsLevel) << endl;
	cout << "OpType             : " << GetOpTypeSymbol(Quizz.OpType) << endl; 
	cout << "Number of Right Answers: " << Quizz.NumberOfRightAnswers << endl; 
	cout << "Number of Wrong Answers: " << Quizz.NumberOfWrongAnswers << endl;
	cout << "______________________________\n";
}

void PlayGame()
{
	stQuizz Quizz;

	Quizz.NumberOfQuestions = ReadHowManyQuestions();
	Quizz.QuestionsLevel = ReadQuestionLevel();
	Quizz.OpType = ReadOperationType();

	GenerateQuizzQuestion(Quizz);
	AskAndCorrectQuestionListAnswers(Quizz);
	PrintQuizzResults(Quizz);

}

void RestSecreen()
{
	system("cls");
	system("color 0F");
}

void StartGame()
{
	char PlayAgain = 'Y';

	do
	{
		RestSecreen();

		PlayGame();

		cout << "Do you want to play again ? Y/N? ";
		cin >> PlayAgain;

	} while (PlayAgain == 'Y' || PlayAgain == 'y');

}

// الاستدعاء : 

//Seeds the random number generator in C++, called only once    
	srand((unsigned)time(NULL));

	StartGame();


**************************************************************************************