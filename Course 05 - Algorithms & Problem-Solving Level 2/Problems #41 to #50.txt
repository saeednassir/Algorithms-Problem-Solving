// Problems #41 :


void FillArray(int arr[100], int& arrLength)
{
	arrLength = 6;

	arr[0] = 10;
	arr[1] = 20;
	arr[2] = 30;
	arr[3] = 30;
	arr[4] = 20;
	arr[5] = 10;
	
}


void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";
	cout << "\n";
}




bool IsPalindromeNumber(int arr[100] , int arrLength)
{
	for (int i = 0; i < arrLength; i++)
	{
		if (arr[i] != arr[arrLength - i - 1])
			return false;
	}
	return true;

}

الاستدعاء : 


int arr[100], arrLength = 0;

	FillArray(arr, arrLength);

	cout << "Array Elements :" << endl;
	PrintArray(arr, arrLength);

	if (IsPalindromeNumber(arr,arrLength))
		cout << "Yes, array is Palindrome ";
	
	else
		cout << "No, array is not Palindrome ";


**************************************************************************************



// Problems #42 :

int RandomNumber(int From, int To)
{
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}

void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{

	cout << "\nEnter number of elements:\n";
	cin >> arrLength;



	for (int i = 0; i < arrLength; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << endl;

}

void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";

	cout << "\n";

}

int OddCount(int arr[100], int arrLength)
{
	int Counter = 0;

	for (int i = 0; i < arrLength; i++)
	{
		if (arr[i] % 2 != 0)
			Counter++;
	}

	return Counter;
}



الاستدعاء : 


srand((unsigned)time(NULL));

	int arr[100], arrLength;

	FillArrayWithRandomNumbers(arr, arrLength);

	cout << "\nArray Elements : ";
	PrintArray(arr, arrLength);

	cout << "\nOdd Numbers count is : ";
	cout << OddCount(arr, arrLength) << endl;


**************************************************************************************




// Problems #43 :

int RandomNumber(int From, int To)
{
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}

void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{

	cout << "\nEnter number of elements:\n";
	cin >> arrLength;



	for (int i = 0; i < arrLength; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << endl;

}

void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";

	cout << "\n";

}

int EvenCount(int arr[100], int arrLength)
{
	int Counter = 0;

	for (int i = 0; i < arrLength; i++)
	{
		if (arr[i] % 2 == 0)
			Counter++;
	}

	return Counter;
}



الاستدعاء : 


srand((unsigned)time(NULL));

	int arr[100], arrLength;

	FillArrayWithRandomNumbers(arr, arrLength);

	cout << "\nArray Elements : ";
	PrintArray(arr, arrLength);

	cout << Even Numbers count is : ";
	cout << EvenCount(arr, arrLength) << endl;


**************************************************************************************



// Problems #44 :


int RandomNumber(int From, int To)
{
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}

void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{

	cout << "\nEnter number of elements:\n";
	cin >> arrLength;



	for (int i = 0; i < arrLength; i++)
	{
		arr[i] = RandomNumber(-100, 100);
	}
	cout << endl;

}

void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";

	cout << "\n";

}

int PositiveCount(int arr[100], int arrLength)
{
	int Counter = 0;

	for (int i = 0; i < arrLength; i++)
	{
		if (arr[i] >= 0)
			Counter++;
	}

	return Counter;
}


الاستدعاء : 


srand((unsigned)time(NULL));

	int arr[100], arrLength;

	FillArrayWithRandomNumbers(arr, arrLength);

	cout << "\nArray Elements : ";
	PrintArray(arr, arrLength);

	cout << "\nPositive Numbers count is : ";
	cout << PositiveCount(arr, arrLength) << endl;


**************************************************************************************



// Problems #45 :


int RandomNumber(int From, int To)
{
	//Function to generate a random number

	int randNum = rand() % (To - From + 1) + From;
	return randNum;

}

void FillArrayWithRandomNumbers(int arr[100], int& arrLength)
{

	cout << "\nEnter number of elements:\n";
	cin >> arrLength;



	for (int i = 0; i < arrLength; i++)
	{
		arr[i] = RandomNumber(-100, 100);
	}
	cout << endl;

}

void PrintArray(int arr[100], int arrLength)
{
	for (int i = 0; i < arrLength; i++)
		cout << arr[i] << " ";

	cout << "\n";

}

int NegativeCount(int arr[100], int arrLength)
{
	int Counter = 0;

	for (int i = 0; i < arrLength; i++)
	{
		if (arr[i] < 0)
			Counter++;
	}

	return Counter;
}



الاستدعاء : 


srand((unsigned)time(NULL));

	int arr[100], arrLength;

	FillArrayWithRandomNumbers(arr, arrLength);

	cout << "\nArray Elements : ";
	PrintArray(arr, arrLength);

	cout << "\Negative Numbers count is : ";
	cout << NegativeCount(arr, arrLength) << endl;


**************************************************************************************




// Problems #46 :


float ReadNumber()
{
	float Number;

	cout << "Please enter a number ?";
	cin >> Number;

	return Number;
}

float MyABS(int Number)
{
	if (Number > 0)
		return Number;
	else
		return Number * -1;

}



الاستدعاء : 



	float Number = ReadNumber();

	cout << "My abs Result : " << MyABS(Number) << endl;
	cout << "C++ abs Result : " << abs(Number) << endl;


**************************************************************************************






// Problems #47 :


float ReadNumber()
{
	float Number;

	cout << "Please enter a number ?";
	cin >> Number;

	return Number;
}


float GetFractionPart(float Number)
{
	return Number - int(Number);
}


int MyRound(float Number)
{
	int IntPart;
	IntPart = int(Number);

	float FractionPart = GetFractionPart(Number);

	if (abs(FractionPart) >= .5)
	{
		if (Number > 0)
			return ++IntPart;
		else
			return --IntPart;
	}
	else
	{
		return IntPart;
	}

}

الاستدعاء : 


float Number = ReadNumber();
	
	cout << "My Round Result : " << MyRound(Number) << endl;
	cout << "C++ Round Result : " << round(Number) << endl;


**************************************************************************************




// Problems #48 :
float ReadNumber()
{
	float Number;

	cout << "Please enter a number ?";
	cin >> Number;

	return Number;
}




int MyFloor(float Number)
{
	int IntPart;
	IntPart = int(Number);

	if (Number >= 0)
		return IntPart;
	else
		return --IntPart;
}

 


الاستدعاء : 


float Number = ReadNumber();
	
	cout << "My Floor Result : " << MyFloor(Number) << endl;
	cout << "C++ Floor Result : " << floor(Number) << endl;
	


**************************************************************************************





// Problems #49 :

float ReadNumber()
{
	float Number;

	cout << "Please enter a number ?";
	cin >> Number;

	return Number;
}


float GetFractionPart(float Number)
{
	return Number - int(Number);
}


int MyCeil(float Number)
{
	int IntPart;
	IntPart = int(Number);
	if (abs(GetFractionPart(Number)) > 0)
	{
		if (Number >= 0)
			return ++IntPart;
		else
			return IntPart;
	}
	else
	{
		return Number;
	}
}




الاستدعاء : 


float Number = ReadNumber();
	
	cout << "My MyCeil Result : " << MyCeil(Number) << endl;
	cout << "C++ MyCeil Result : " << ceil(Number) << endl;


**************************************************************************************



// Problems #50 :


float ReadNumber()
{
	float Number;

	cout << "Please enter a number ?";
	cin >> Number;

	return Number;
}





int MySqrt(float Number)
{
	return pow(Number, 0.5);
}


الاستدعاء : 


float Number = ReadNumber();
	
	cout << "My Sqrt Result : " << MySqrt(Number) << endl;
	cout << "C++ Sqrt Result : " << sqrt(Number) << endl;


**************************************************************************************